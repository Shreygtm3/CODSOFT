// File: todo_list_manager.cpp
#include <iostream>
#include <vector>
#include <string>

struct Task {
    std::string description;
    bool completed;

    Task(const std::string& desc) : description(desc), completed(false) {}
};

void displayMenu() {
    std::cout << "
To-Do List Manager" << std::endl;
    std::cout << "-------------------" << std::endl;
    std::cout << "1. Add Task" << std::endl;
    std::cout << "2. View Tasks" << std::endl;
std::cout << "3. Mark Task as Completed" << std::endl;
    std::cout << "4. Remove Task" << std::endl;
    std::cout << "5. Exit" << std::endl;
    std::cout << "Choose an option (1-5): ";
}

void addTask(std::vector<Task>& tasks) {
    std::cin.ignore(); // Clear input buffer
    std::string taskDescription;

    std::cout << "Enter task description: ";
std::getline(std::cin, taskDescription);

tasks.emplace_back(taskDescription);
std::cout << "Task added successfully!" << std::endl;
}

void viewTasks(const std::vector<Task>& tasks) {
    if (tasks.empty()) {
        std::cout << "No tasks to display!" << std::endl;
        return;
    }

    std::cout << "
To-Do List:" << std::endl;
for (size_t i = 0; i < tasks.size(); ++i) {
        std::cout << i + 1 << ". " << tasks[i].description 
                  << " [" << (tasks[i].completed? "Completed" : "Pending") << "]"
<< std::endl;
    }
}

void markTaskAsCompleted(std::vector<Task>& tasks) {
    if (tasks.empty()) {
        std::cout << "No tasks available to mark as completed." << std::endl;
        return;
    }

    viewTasks(tasks);
size_t taskNumber;
    std::cout << "Enter the task number to mark as completed: ";
    std::cin >> taskNumber;

    if (taskNumber < 1 || taskNumber > tasks.size()) {
        std::cout << "Invalid task number!" << std::endl;
    } else {
tasks[taskNumber - 1].completed = true;
        std::cout << "Task marked as completed!" << std::endl;
    }
}

void removeTask(std::vector<Task>& tasks) {
    if (tasks.empty()) {
        std::cout << "No tasks available to remove." << std::endl;
        return;
    }

viewTasks(tasks);
    size_t taskNumber;
    std::cout << "Enter the task number to remove: ";
    std::cin >> taskNumber;

    if (taskNumber < 1 || taskNumber > tasks.size()) {
        std::cout << "Invalid task number!" << std::endl;
    } else {
tasks.erase(tasks.begin() + taskNumber - 1);
        std::cout << "Task removed successfully!" << std::endl;
    }
}

int main() {
    std::vector<Task> tasks;
    int choice;

    do {
        displayMenu();
        std::cin >> choice;

switch (choice) {
            case 1:
                addTask(tasks);
                break;
            case 2:
viewTasks(tasks);
                break;
            case 3:
                markTaskAsCompleted(tasks);
break;
            case 4:
                removeTask(tasks);
                break;
case 5:
                std::cout << "Exiting the program. Goodbye!" << std::endl;
                break;
            default:
std::cout << "Invalid choice. Please try again." << std::endl;
        }
    } while (choice != 5);

    return 0;
}
